
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUALleftPLUSMINUSleftSTARSLASHleftINDEXrightUMINUSDEREFAMPERSANDAMPERSAND COMMA COMMENT EQUAL IDENTIFIER INTEGER LEFT_BRACE LEFT_BRACKET LEFT_PAREN MINUS PLUS REAL RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN SEMICOLON SLASH STAR STRINGprogram : statementprogram : program statementstatement : expression SEMICOLONexpression : expression EQUAL expression\n                  | expression PLUS expression\n                  | expression MINUS expression\n                  | expression STAR expression\n                  | expression SLASH expressionexpression : LEFT_PAREN expression RIGHT_PARENexpression : MINUS expression %prec UMINUSexpression : INTEGERexpression : REALexpression : STRINGexpression : expression LEFT_PAREN expression_list RIGHT_PARENexpression : AMPERSAND expressionexpression : assignment_targetassignment_target : IDENTIFIERassignment_target : expression LEFT_BRACKET expression RIGHT_BRACKET %prec INDEXassignment_target : STAR expression %prec DEREFexpression_list : emptyexpression_list : expressionexpression_list : expression COMMA expression_listempty :'
    
_lr_action_items = {'LEFT_PAREN':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,35,36,37,38,],[6,6,-1,20,6,6,6,-11,-12,-13,6,-16,-17,-2,-3,6,6,6,6,6,6,6,-10,-19,20,-15,-4,-5,-6,-7,-8,20,20,-9,6,-14,-18,]),'MINUS':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,35,36,37,38,],[4,4,-1,17,4,4,4,-11,-12,-13,4,-16,-17,-2,-3,4,4,4,4,4,4,4,-10,-19,17,-15,17,-5,-6,-7,-8,17,17,-9,4,-14,-18,]),'INTEGER':([0,1,2,4,5,6,10,13,14,15,16,17,18,19,20,21,36,],[7,7,-1,7,7,7,7,-2,-3,7,7,7,7,7,7,7,7,]),'REAL':([0,1,2,4,5,6,10,13,14,15,16,17,18,19,20,21,36,],[8,8,-1,8,8,8,8,-2,-3,8,8,8,8,8,8,8,8,]),'STRING':([0,1,2,4,5,6,10,13,14,15,16,17,18,19,20,21,36,],[9,9,-1,9,9,9,9,-2,-3,9,9,9,9,9,9,9,9,]),'AMPERSAND':([0,1,2,4,5,6,10,13,14,15,16,17,18,19,20,21,36,],[10,10,-1,10,10,10,10,-2,-3,10,10,10,10,10,10,10,10,]),'IDENTIFIER':([0,1,2,4,5,6,10,13,14,15,16,17,18,19,20,21,36,],[12,12,-1,12,12,12,12,-2,-3,12,12,12,12,12,12,12,12,]),'STAR':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,35,36,37,38,],[5,5,-1,18,5,5,5,-11,-12,-13,5,-16,-17,-2,-3,5,5,5,5,5,5,5,-10,-19,18,-15,18,18,18,-7,-8,18,18,-9,5,-14,-18,]),'$end':([1,2,13,14,],[0,-1,-2,-3,]),'SEMICOLON':([3,7,8,9,11,12,22,23,25,26,27,28,29,30,35,37,38,],[14,-11,-12,-13,-16,-17,-10,-19,-15,-4,-5,-6,-7,-8,-9,-14,-18,]),'EQUAL':([3,7,8,9,11,12,22,23,24,25,26,27,28,29,30,31,34,35,37,38,],[15,-11,-12,-13,-16,-17,-10,-19,15,-15,15,-5,-6,-7,-8,15,15,-9,-14,-18,]),'PLUS':([3,7,8,9,11,12,22,23,24,25,26,27,28,29,30,31,34,35,37,38,],[16,-11,-12,-13,-16,-17,-10,-19,16,-15,16,-5,-6,-7,-8,16,16,-9,-14,-18,]),'SLASH':([3,7,8,9,11,12,22,23,24,25,26,27,28,29,30,31,34,35,37,38,],[19,-11,-12,-13,-16,-17,-10,-19,19,-15,19,19,19,-7,-8,19,19,-9,-14,-18,]),'LEFT_BRACKET':([3,7,8,9,11,12,22,23,24,25,26,27,28,29,30,31,34,35,37,38,],[21,-11,-12,-13,-16,-17,-10,-19,21,-15,-4,-5,-6,-7,-8,21,21,-9,-14,-18,]),'RIGHT_PAREN':([7,8,9,11,12,20,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,],[-11,-12,-13,-16,-17,-23,-10,-19,35,-15,-4,-5,-6,-7,-8,-21,37,-20,-9,-23,-14,-18,-22,]),'COMMA':([7,8,9,11,12,22,23,25,26,27,28,29,30,31,35,37,38,],[-11,-12,-13,-16,-17,-10,-19,-15,-4,-5,-6,-7,-8,36,-9,-14,-18,]),'RIGHT_BRACKET':([7,8,9,11,12,22,23,25,26,27,28,29,30,34,35,37,38,],[-11,-12,-13,-16,-17,-10,-19,-15,-4,-5,-6,-7,-8,38,-9,-14,-18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,1,],[2,13,]),'expression':([0,1,4,5,6,10,15,16,17,18,19,20,21,36,],[3,3,22,23,24,25,26,27,28,29,30,31,34,31,]),'assignment_target':([0,1,4,5,6,10,15,16,17,18,19,20,21,36,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'expression_list':([20,36,],[32,39,]),'empty':([20,36,],[33,33,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','parser.py',90),
  ('program -> program statement','program',2,'p_program_multiple','parser.py',95),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expression','parser.py',100),
  ('expression -> expression EQUAL expression','expression',3,'p_expression_binop','parser.py',105),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',106),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',107),
  ('expression -> expression STAR expression','expression',3,'p_expression_binop','parser.py',108),
  ('expression -> expression SLASH expression','expression',3,'p_expression_binop','parser.py',109),
  ('expression -> LEFT_PAREN expression RIGHT_PAREN','expression',3,'p_expression_group','parser.py',127),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','parser.py',132),
  ('expression -> INTEGER','expression',1,'p_expression_integer','parser.py',137),
  ('expression -> REAL','expression',1,'p_expression_real','parser.py',142),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',147),
  ('expression -> expression LEFT_PAREN expression_list RIGHT_PAREN','expression',4,'p_expression_call','parser.py',152),
  ('expression -> AMPERSAND expression','expression',2,'p_expression_address_of','parser.py',157),
  ('expression -> assignment_target','expression',1,'p_expression_assignment_target','parser.py',162),
  ('assignment_target -> IDENTIFIER','assignment_target',1,'p_assignment_target_identifier','parser.py',167),
  ('assignment_target -> expression LEFT_BRACKET expression RIGHT_BRACKET','assignment_target',4,'p_assignment_target_index','parser.py',172),
  ('assignment_target -> STAR expression','assignment_target',2,'p_assignment_target_deref','parser.py',177),
  ('expression_list -> empty','expression_list',1,'p_expression_list_empty','parser.py',182),
  ('expression_list -> expression','expression_list',1,'p_expression_list_one','parser.py',187),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list_list','parser.py',192),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',197),
]
